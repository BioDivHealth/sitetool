% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mod_step3_fct_lc_analysis.R
\name{createContDataFrame}
\alias{createContDataFrame}
\title{Analyze a continuous raster surrounding a list of sites}
\usage{
createContDataFrame(in_df, raster, dist, progress = F)
}
\arguments{
\item{in_df}{A data frame containing site information, including a `geometry` column with spatial point or polygon data.}

\item{raster}{A continuous raster (`SpatRaster`) representing NDVI or other continuous environmental data.}

\item{dist}{Numeric. The radius (in map units) around each site to extract raster statistics.}

\item{progress}{Logical. If `TRUE`, updates a progress bar during processing.}
}
\value{
A data frame summarizing raster-wide statistics (mean, standard deviation, min, max) for each site.
}
\description{
This function returns statistics for an input raster for each site based on a given radius.
}
\details{
The function processes each site by:
1. Cropping the raster within the specified radius.
2. Calculating summary statistics: mean, standard deviation, range (min/max).
3. Restructuring the results into a long-format data frame.
}
\examples{
\dontrun{
library(terra)
library(sf)

# Example continuous raster (NDVI-like data)
r <- rast(ncol = 10, nrow = 10, vals = runif(100, -1, 1)) # Simulated NDVI values

# Example site data with points
in_df <- data.frame(
  site = c("village1", "village2"),
  site_id = c(1, 2),
  input_site = c(TRUE, FALSE)
)
in_df$geometry <- st_sfc(st_point(c(1,1)), st_point(c(6,6)))
in_df <- st_as_sf(in_df)

# Run function
createNDVIDataFrame(in_df, r, dist = 500, progress = TRUE)
}

}
